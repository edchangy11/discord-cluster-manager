name: L40S PyTorch/CUDA Job
on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Unique identifier for this run'
        required: true
        type: string
      payload:
        description: 'Content of the user submission, as json string'
        required: true
        type: string
      requirements:
        description: 'Contents for a requirements.txt file'
        required: false
        type: string

run-name: 'L40S Job - ${{ github.event.inputs.run_id }}'

jobs:
  run:
    runs-on: [self-hosted, nvidia-l40s]
    timeout-minutes: 10
    container:
      image: nvidia/cuda:12.4.0-devel-ubuntu22.04
    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Create input files
      shell: bash
      run: |
        apt-get update && apt-get install -y jq python3
        
        # Create a proper test payload using Python
        python3 -c "
import json
import zlib
import base64

# Create test payload
payload = {
    'lang': 'py',
    'mode': 'test',
    'code': 'def custom_kernel(input):\\n    return input',
    'file_name': 'test.py',
    'arch': '89',
    'test_timeout': 120,
    'benchmark_timeout': 180,
    'ranked_timeout': 300
}

# Compress and encode like the Discord bot does
json_str = json.dumps(payload)
compressed = zlib.compress(json_str.encode('utf-8'))
encoded = base64.b64encode(compressed).decode('utf-8')

# Write the encoded payload to payload.json as expected by github-runner.py
with open('payload.json', 'w') as f:
    f.write(encoded)

print('Created test payload')
"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Setup Python environment
      shell: bash
      run: |
        uv venv .venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH

        if [[ -n "${{ github.event.inputs.requirements }}" ]]; then
          cat > "requirements.txt" <<'EOL'
          ${{ github.event.inputs.requirements }}
        EOL
        uv pip install -r "requirements.txt"
        fi
        uv pip install -e .

    - name: Run script
      shell: bash
      run: |
        python src/runners/github-runner.py
        cat result.json  # Debug: show output

    - name: Upload training artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: run-result
        path: |
          result.json

    env:
      CUDA_VISIBLE_DEVICES: 0
